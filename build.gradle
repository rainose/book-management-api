import org.jooq.codegen.gradle.CodegenTask

buildscript {
    dependencies {
        classpath "org.flywaydb:flyway-database-postgresql:${libs.versions.flyway.get()}"
        classpath "org.postgresql:postgresql:${libs.versions.postgresql.get()}"
    }
}

plugins {
    id 'java'
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.spring)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.jooq.codegen)
    alias(libs.plugins.flyway)
    alias(libs.plugins.ktlint)
}

group = 'com.bookmanageapp'
version = '0.0.1-SNAPSHOT'
description = '書籍管理システムのバックエンドAPI'

// データベース接続情報を環境変数から読み込む
ext {
    dbHost = System.getenv('DB_HOST') ?: project.findProperty('dbHost') ?: 'localhost'
    dbPort = System.getenv('DB_PORT') ?: project.findProperty('dbPort') ?: '5432'
    dbName = System.getenv('DB_NAME') ?: project.findProperty('dbName') ?: 'bookmanageapp'
    dbUser = System.getenv('DB_USER') ?: project.findProperty('dbUser') ?: 'bookmanage_dev'
    dbPassword = System.getenv('DB_PASSWORD') ?: project.findProperty('dbPassword') ?: 'secret'
    dbUrl = "jdbc:postgresql://${dbHost}:${dbPort}/${dbName}"
}


ktlint {
    filter {
        exclude { element -> element.file.path.contains("generated") }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Core
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.jooq
    implementation libs.spring.boot.starter.validation

    // Database
    implementation libs.flyway.core
    implementation libs.flyway.database.postgresql
    implementation libs.jooq.postgres.extensions
    implementation libs.postgresql

    // Kotlin
    implementation libs.kotlin.reflect
    implementation libs.jackson.module.kotlin

    // Development
    developmentOnly libs.spring.boot.docker.compose

    // Testing
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.kotlin.test.junit5
    testImplementation libs.mockk
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.testcontainers.junit.jupiter
    testRuntimeOnly libs.junit.platform.launcher

    // jOOQ コード生成用の依存関係
    jooqCodegen libs.postgresql
    jooqCodegen libs.jooq.codegen
    jooqCodegen libs.jooq.meta.extensions
    jooqCodegen libs.jooq.postgres.extensions
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
    locations = ["classpath:db/migration"]
    driver = 'org.postgresql.Driver'
}



jooq {
    configuration {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = dbUrl
            user = dbUser
            password = dbPassword
        }
        generator {
            name = 'org.jooq.codegen.KotlinGenerator'

            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'

                // PostgreSQL固有の設定
                excludes = 'flyway_schema_history'
                includes = '.*'

                // PostgreSQL拡張機能を有効にする
                properties {
                    property {
                        key = 'usePostgresExtensions'
                        value = 'true'
                    }
                }
            }

            generate {
                pojos = true
                pojosAsKotlinDataClasses = true
                springAnnotations = true
                javaTimeTypes = true
                deprecated = false
                instanceFields = true
                generatedAnnotation = true

                // Kotlinに最適化された設定
                kotlinNotNullPojoAttributes = true
                kotlinNotNullRecordAttributes = true
                kotlinDefaultedNullablePojoAttributes = true
                kotlinDefaultedNullableRecordAttributes = true
            }

            target {
                packageName = 'com.bookmanageapp.jooq'
                directory = 'src/main/generated'
                clean = true
            }
        }
    }
}

// コード生成タスクの依存関係を設定（タスクが存在する場合のみ）
tasks.withType(CodegenTask).configureEach {
    dependsOn 'flywayMigrate'
    
    // 入力として使用するファイルを指定
    inputs.files(fileTree('src/main/resources/db/migration'))
    
    // 出力ディレクトリを指定
    outputs.dir('src/main/generated')
}

// コンパイル前にJOOQコード生成を実行
tasks.named('compileKotlin') {
    mustRunAfter tasks.withType(CodegenTask)
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
}